{
	"Header": {
		"title": "Seongyeol Yi",
		"language": "Language",
		"theme": "Theme",
		"auth": "Account",
		"settings": "Settings"
	},
	"MainPage": {
		"bio": "<name>Seongyeol Yi</name>  <role>Frontend Developer, Content creator</role><br></br>I'm interested in creating things that provide value to many people. I work as a Frontend Developer at Kakao. I majored in Materials Science and Engineering and Computer Science and Engineering at Seoul National University.",
		"csIntro": "I share the wonder I felt learning computer science in school.",
		"subscriberCount": " people are joining us!",
		"instagramIntro": "Developer Instagram account.",
		"viewMore": "View More",
		"instagramDescription": "Inspired by <externalLink>Minguhong Manufacturing</externalLink>, I share what this account is about and some of my favorite posts.",
		"reactIntro": "We explore React source code in internal study sessions.",
		"reactHelper": " has been incredibly helpful.",
		"craftIntro": "Showcasing things I've built.",
		"comingSoon": "Coming Soon"
	},
	"PostNavigation": {
		"backToList": "Back to List",
		"prev": "Previous",
		"next": "Next"
	},
	"CS": {
		"dateFormat": "{date, date, long}",
		"plannedDateFormat": "{date, date, long}",
		"part1Title": "Part 1: Building a Computer with Just 0s and 1s",
		"hw1Title": "Why Computers Only Have Two Fingers",
		"hw1Description": "Why do computers use 0s and 1s? Let's find out how these two numbers become the first step in capturing sound, images, and everything we can imagine.",
		"hw2Title": "Computers Are Built on Choosing Between Mom and Dad",
		"hw2Description": "How can a logical rule like 'If it rains when you go out, take an umbrella' actually be implemented as a circuit? Let's see how we can create all the logic circuits in the world with a combination of just three basic gates.",
		"hw3Title": "Turns Out The Computer Didn't Really Like Both Mom and Dad",
		"hw3Description": "How many types of gates do you need to know to build a computer? Let's see how a single gate can be used to construct all digital logic circuits, including AND, OR, and NOT.",
		"hw4Title": "Now You Can Make A Calculator",
		"hw4Description": "Let's use what we've learned so far to build a calculator that's better at addition than we are. If you were stranded on a deserted island with a pile of NAND gates, you wouldn't have to worry about not being able to add.",
		"hw5Title": "Fixing a Computer with Amnesia",
		"hw5Description": "The circuits we've built so far can't remember calculation results at all. Let's see how we can cleverly connect two NOR gates to store information.",
		"hw6Title": "If All It Does Is Math, It's Just a Calculator",
		"hw6Description": "Now that we've made circuits for addition and subtraction, have we built a 'computer'? Let's explore what the essence of a computer is, and how one machine can realize infinite possibilities.",
		"hw7Title": "Von Neumann, Again?",
		"hw7Description": "The idea of storing programs in the same space as data is a simple but powerful idea. Let's explore how this one idea created the basic skeleton of modern computers: CPU, memory, and bus.",
		"hw8Title": "The Billion-Times-a-Second Routine of a CPU",
		"hw8Description": "Instruction Cycle (Fetch-Decode-Execute)",
		"hw9Title": "Mom, It's Not a Mess ‚Äî It's Called Cache!",
		"hw9Description": "Memory Hierarchy",

		"part2Title": "Part 2: Solving Problems Like a Computer",
		"ds1Title": "Can't Clean Your Room? At Least Organize Your Data",
		"ds1Description": "Arrays and Linked Lists",
		"ds2Title": "A Restaurant Where Latecomers Eat First",
		"ds2Description": "Stacks and Queues",
		"ds3Title": "Climbing the Algorithm Social Ladder Is Hard",
		"ds3Description": "Time Complexity",
		"ds4Title": "The Sorting Algorithm Hierarchy",
		"ds4Description": "Bubble, Selection, Insertion, Merge, Quick, Heap Sort",
		"ds5Title": "CS Students Don't Even Know What Trees Look Like",
		"ds5Description": "Trees",
		"ds6Title": "Obsessed with One Thing vs. Can't Focus on Anything",
		"ds6Description": "DFS, BFS",
		"ds7Title": "The Try-Hard That Gets Things Done",
		"ds7Description": "Hash Tables",

		"part3Title": "Part 3: Making Computers More Usable",
		"os1Title": "Born from Devs Who Couldn't Stand Idle CPUs",
		"os1Description": "Background of Operating System's Emergence",
		"os2Title": "Why You Can't Use Everything in Your Own Computer",
		"os2Description": "System Calls",
		"os3Title": "You Learned C, But Your Computer Doesn't Understand It",
		"os3Description": "Compilers",
		"os4Title": "Task Management Tips from a Productive CPU",
		"os4Description": "Processes and Threads",
		"os5Title": "'The Game Is 50GB, Do I Need To Buy 50GB Of RAM?'",
		"os5Description": "Virtual Memory",
		"os6Title": "How This Text Reached You",
		"os6Description": "Network",

		"andGate": "AND Gate",
		"nandUniversality": "NAND Universality",
		"nandToNot": "Creating NOT Gate from NAND Gate",
		"truthTable": "Truth Table",
		"turingMachineDemo": "Turing Machine Demo",
		"binaryAddition": "Binary Addition 11(2) + 11(2) = 110(2)",
		"decimalToBinary": "Decimal to Binary Converter",
		"decimalToBinaryDesc": "Enter a decimal number to see its binary representation and calculation process.",
		"enterDecimal": "Enter a decimal number",
		"intro": "Let's build a computer together, starting from 0s and 1s. I share the wonder I felt learning computer science.",
		"demoDescription": "Explore key concepts in computer science with interactive demos."
	},
	"NotFound": {
		"backHome": "Back to Home"
	},
	"EmailSubscribe": {
		"emailPlaceholder": "Email address",
		"subscribeButton": "Subscribe"
	},
	"Comment": {
		"loginRequired": "You need to <loginLink>login</loginLink> to leave a comment.",
		"placeholder": "Thank you for reading! üëç",
		"submit": "Submit",
		"submitting": "Submitting...",
		"noComments": "Be the first to comment!",
		"developer": "Developer #{number}",
		"dateFormat": "MMM DD, YYYY HH:mm:ss",
		"loading": "Logging in..."
	},
	"ZeroAndOne": {
		"PixelateImage": {
			"title": "Image Pixelation",
			"analogLandscape": "Analog Landscape",
			"digitalizedImage": "Digitalized Image",
			"loading": "Loading image...",
			"pixelSize": "Pixel Size"
		},
		"TruthTableDemo": {
			"rainForecast": "Rain Forecast",
			"goingOut": "Going Out",
			"takeUmbrella": "Take Umbrella"
		}
	},
	"Sequential": {
		"ClockSyncVisualizer": {
			"reset": "Reset",
			"clockSignal": "Clock Signal Period"
		},
		"EdgeTriggerDemo": {
			"risingEdge": "Rising Edge",
			"fallingEdge": "Falling Edge",
			"clock": "Clock"
		},
		"CombVsSeq": {
			"cannotRemember": "When it can't remember",
			"canRemember": "When it can remember"
		}
	},
	"TuringMachine": {
		"title": "Turing Machine",
		"ControlUnit": {
			"title": "Control Unit",
			"currentState": "Current State",
			"readSymbol": "Read Symbol",
			"nextState": "Next State",
			"writeSymbol": "Write Symbol",
			"move": "Move"
		},
		"Tape": {
			"title": "Tape",
			"head": "‚ñ≤ Head"
		}
	},
	"AmdahlLawExample": {
		"description": "When the performance of <proportion></proportion> of the whole is improved by a factor of <speedup></speedup>, the overall performance increases by a factor of <overallSpeedup></overallSpeedup>. However, even if the performance improvement is infinite, the overall performance increase cannot exceed <maxSpeedup></maxSpeedup> times.",
		"proportionLabel": "Proportion of the part to be improved ({value}%)",
		"speedupLabel": "Performance improvement factor of the part ({value}x)",
		"infinity": "infinity"
	}
}
